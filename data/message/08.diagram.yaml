action: join
event: chat
data:
  type: case
  children:
  - type: diagram
    bind:
      value:
        default: |-
          sequenceDiagram
              participant UI as UI (Frontend)
              participant GW as Gateway
              participant Kafka as Kafka (Message Queue)
              participant PY as Python Service
              participant AI as AI Service

              UI->>GW: User inputs message, triggers 'chat' event (via ws)
              activate UI
              activate GW

              GW->>Kafka: Places message into the 'outgo' queue
              deactivate GW

              Kafka->>PY: Python service consumes 'chat' event from 'outgo' queue
              activate PY

              PY->>AI: Sends message to the AI for processing
              activate AI

              AI-->>PY: Returns processed output
              deactivate AI

              PY->>Kafka: Puts AI output into the 'income' queue (with recipient info)
              deactivate PY

              Kafka->>GW: Gateway consumes message from 'income' queue
              activate GW

              GW->>UI: Forwards message to the corresponding recipient (via ws)
              deactivate GW

              UI->>UI: Renders the AI's response in the chat interface
              deactivate UI
  - type: diagram
    bind:
      value:
        default: |-
          graph TD
              subgraph UI
                  A[User Input Field] --> B{Sends a message};
              end

              subgraph User-Facing Components
                  B --> C[Bind to 'chat' event on WS];
                  C --> D[Send message via WS to Gateway];
              end

              subgraph Gateway
                  D --> E[GW receives message];
                  E --> F[Place message into Kafka 'outgo' queue];
              end

              subgraph Backend Services
                  F --> G[Business Service listens to 'outgo' queue];
                  G --> H{Detects 'chat' event};
                  H --> I[Processes message and calls AI];
                  I --> J[AI generates response];
                  J --> K[Business Service places AI response into Kafka 'income' queue];
              end

              subgraph Gateway
                  K --> L[GW listens to 'income' queue];
                  L --> M[GW receives message with recipient info];
                  M --> N[GW forwards message to corresponding WS];
              end

              subgraph User-Facing Components
                  N --> O[WS receives message];
              end

              subgraph UI
                  O --> P[UI renders chat content];
              end
  - type: text
    bind:
      value:
        default: |-
          ## Flow Description:
          - User Input: A user types a message into the input field on the UI.
          - Bind to 'chat' event: The UI binds the message to a 'chat' event on the WebSocket (WS).
          - Send to Gateway (GW): The UI sends the message via the WS to the GW.
          - GW Receives Message: The GW, acting purely as a message router, receives the incoming message.
          - Place in 'outgo' queue: The GW places the message into a Kafka queue named 'outgo' for processing by backend services.
          - Business Service Listens: A backend business service continuously listens to the 'outgo' queue.
          - Detects 'chat' event: The business service retrieves the message and identifies it as a 'chat' event.
          - Call AI: The business service processes the message and sends it to the AI for a response.
          - AI Generates Response: The AI processes the request and generates a response.
          - Place in 'income' queue: The business service places the AI's response into another Kafka queue named 'income'.
          - GW Listens to 'income': The GW also listens to the 'income' queue for outgoing messages.
          - GW Receives with Recipient Info: The GW retrieves the AI's response, which includes information about the intended recipient on its "envelope".
          - Forward to WS: The GW uses the recipient information to send the message to the corresponding WS connection.
          - WS Receives Message: The WS receives the message from the GW.
          - UI Renders Content: The UI receives the message from the WS and renders the new chat content.
    attrs:
      format: md
